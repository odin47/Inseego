function TelnetClient() { // eslint-disable-line no-unused-vars

  'use strict';

  var termType = ''; // eslint-disable-line no-var

  this.getTermType = function() {
    return termType;
  };

  this.setTermType = function(type) {
    termType = type;
  };

  function pushStr(str, arr) {
    for (var i = 0; i < str.length; i++) { // eslint-disable-line
      arr.push(str.charCodeAt(i));
    }
  }

  this.filterReceiveData = function(data) {
    var arrUint8 = new Uint8Array(data); // eslint-disable-line no-var
    var arr = Array.prototype.slice.call(arrUint8); // eslint-disable-line no-var

    var sendQueue = []; // eslint-disable-line no-var
    var stringToDisplay = ''; // eslint-disable-line no-var
    var chr = ''; // eslint-disable-line no-var
    var code = ''; // eslint-disable-line no-var
    var value = ''; // eslint-disable-line no-var

    while (arr.length > 0) {
      chr = arr.shift();
      switch (chr) {
        case 255:   // IAC
          code = arr.shift();
          value = arr.shift();
          switch (code) {
            case 254: // DONT
              break;
            case 253: // DO
              if (value === 24) {
                // Terminal type
                sendQueue.push(255, 251, value);
              } else {
                // Refuse other DO requests with a WONT
                sendQueue.push(255, 252, value);
              }
              break;
            case 252: // WONT
              break;
            case 251: // WILL
              if (value === 1) {
                // Affirm echo with DO
                sendQueue.push(255, 253, value);
              } else {
                // Reject other WILL offers with a DONT
                sendQueue.push(255, 254, value);
              }
              break;
            case 250: // SB (subnegotiation)
              if (value === 24) {
                // TERM-TYPE subnegotiation
                if (arr[0] === 1 && arr[1] === 255 && arr[2] === 240) {
                  arr.shift(); arr.shift(); arr.shift();
                  sendQueue.push(255, 250, 24, 0);
                  pushStr(termType, sendQueue);
                  sendQueue.push(255, 240);
                } else {
                  // console.log("Invalid subnegotiation received" + arr)
                }
              } else {
                // console.log("Ignoring SB " + value)
              }
              break;
            default:
              break;
          }
          break;
        case 242:   // Data Mark (Synch)
          code = arr.shift();
          value = arr.shift();
          break;
        default:   // everything else
          stringToDisplay += String.fromCharCode(chr);
      }
    }

    return {
      dataToSend: sendQueue.length ? new Uint8Array(sendQueue) : '',
      dataToDisplay: stringToDisplay
    };
  };

  this.filterSendData = (event) => {
    const sendQueue = [];

    var stringToSend; // eslint-disable-line no-var

    switch (event.key) {
      case 'Shift':
        break;
      case 'Control':
        break;
      case 'Enter':
        stringToSend = '\n';
        break;
      case 'Backspace':
        stringToSend = '\b';
        break;
      case 'Tab':
        stringToSend = '\t';
        break;
      case 'Escape':
        stringToSend = '\x1b';
        break;
      case 'ArrowLeft':
        stringToSend = '\x1b[D';
        break;
      case 'ArrowRight':
        stringToSend = '\x1b[C';
        break;
      case 'ArrowUp':
        stringToSend = '\x1b[A';
        break;
      case 'ArrowDown':
        stringToSend = '\x1b[B';
        break;
      default:
        stringToSend = event.key;
        break;
    }

    for (var i = 0; i < stringToSend.length; i++) { // eslint-disable-line
      sendQueue.push(stringToSend.charCodeAt(i));
    }

    return {
      dataToSend: sendQueue.length ? new Uint8Array(sendQueue) : ''
    };
  };
};