(function () {
  'use strict';

  var paramsId; // eslint-disable-line no-var
  var params; // eslint-disable-line no-var
  var uri; // eslint-disable-line no-var
  var socket; // eslint-disable-line no-var

  function getQueryParams(qs) {
    qs = qs.split('+').join(' '); // eslint-disable-line

    var params = {}, // eslint-disable-line
      tokens,
      re = /[?&]?([^=]+)=([^&]*)/g;

    while (tokens = re.exec(qs)) { // eslint-disable-line
      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    }

    return params;
  }

  function loadParams() {
    paramsId = getQueryParams(window.location.search).paramsId;
    try {
      params = JSON.parse(window.localStorage.getItem(paramsId));
    } catch (ex) {
      console.err('Cannot load connection parameters!'); // eslint-disable-line no-console
    }
  }

  window.onload = function() {
    loadParams();
    document.title = unescape(params.title || 'Telnet');
    uri = 'wss://' + params.host + '/' + params.path; // eslint-disable-line prefer-template

    const insertPoint = document.getElementById('terminal');

    Terminal.applyAddon(fit); // eslint-disable-line no-undef

    const term = new Terminal({ // eslint-disable-line no-undef
      fontSize: 18,
      fontFamily: 'consolas, monospace',
      cursorBlink: true
    });

    const telnetClient = new TelnetClient(); // eslint-disable-line no-undef
    term.open(insertPoint);

    term.fit();
    term.focus();

    const termType = "xterm";

    telnetClient.setTermType(termType);

    setTimeout(function () { // eslint-disable-line prefer-arrow-callback
      //////////// /////////////////////////// RESIZE
      window.addEventListener('resize', () => {
        clearTimeout(window.resizedFinished);
        window.resizedFinished = setTimeout(() => {
          term.fit();
        }, 250);
      });

      socket = new WebSocket(uri, 'binary');
      socket.binaryType = 'arraybuffer';

      //////////// /////////////////////////// RECEIVE
      socket.onmessage = (message) => {
        const { dataToSend, dataToDisplay } = telnetClient.filterReceiveData(message.data);

        if (dataToSend.length) {
          socket.send(dataToSend);
        }

        if (dataToDisplay) {
          term.write(dataToDisplay);
        }
      };

      //////////// /////////////////////////// SEND
      term.on('key', (key, event) => {
        const { dataToSend } = telnetClient.filterSendData(event);

        if (dataToSend.length) {
          socket.send(dataToSend);
        }
      });
    });
  };

})();