//
// Forms
// --------------------------------------------------
// Normalize non-controls
//
// Restyle and baseline non-control form elements.
fieldset {
  margin: 0;
  padding: 0; // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
  border: 0; // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
}

legend,
.legend {
  display: block;
  margin: @margin-md 0 @margin-sm 0;
  padding: 0;
  width: 100%;
  border: 0;
  color: @legend-color;
  text-transform: uppercase;
  font-weight: normal;
  font-size: 12px;
  line-height: inherit;
  &.form-block {
    display: flex;
    align-items: center;
    flex-flow: row nowrap;
    &:after {
      align-self: center;
      flex: 1 1 auto;
      margin-left: 8px;
      border-top-width: 1px;
      border-top-style: solid;
      content: '';
      opacity: .5;
    }
    &.center {
      &:before {
        align-self: center;
        flex: 1 1 auto;
        margin-right: 8px;
        border-top-width: 1px;
        border-top-style: solid;
        content: '';
        opacity: .5;
      }
    }
  }
  >.dot {
    margin-right: 5px;
    width: 30px;
    height: 30px;
    font-size: 14px;
    line-height: 32px;
  }
}

label {
  display: inline-block;
  margin-bottom: @margin-xs;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  color: @label-text-color;
  text-transform: @label-transform;
  letter-spacing: 0.05rem;
  font-weight: normal;
  font-size: @label-font-size;
  font-family: @headings-font-family;
  >a {
    display: inline-block;
    margin-top: -4px;
    height: 10px;
    font-size: 14px;
  }
  .form-group & {
    display: block;
  }
  .form-inline & {
    display: inline-block;
  }
  &.small {
    margin-bottom: 0;
    color: @text-muted;
    font-weight: normal!important;
    font-size: 10px!important;
  } // use btn-link to add tooltips on labels
  .btn.btn-link {
    padding: 0;
  }
}

// Editable inputs
label.editable {
  position: relative;
  display: block;
  margin: 0;
  padding: 7px 0 0;
  min-height: 34px;
  color: inherit;
  text-transform: none;
  font-weight: inherit;
  font-size: inherit;
  font-size: inherit;
  cursor: pointer;
  .form-control+span {
    position: relative;
    display: inline-block;
    overflow: hidden;
    padding-right: @margin-md;
    max-width: 100%;
    border-bottom: 1px dashed fade(black, 5%);
    text-overflow: ellipsis;
    white-space: nowrap;
    &:after {
      position: absolute;
      right: 0;
      display: inline-block;
      color: @brand-primary;
      content: "\f040";
      font: normal normal normal 14px/1 FontAwesome;
      font-size: 10px;
      line-height: 16px;

      text-rendering: auto;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
  }
  .form-control {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 0;
    opacity: 0;

    .transition(none);
    &:not(:focus) {
      padding-right: 0;
      padding-left: 0;
    }
  }
  .form-control:focus {
    z-index: 10;
    width: 100%;
    opacity: 1;

    .transition(all .25s ease);
    ~span {
      display: none;
    }
  }
  .form-control.ng-invalid-required+span,
  .form-control.ng-invalid-required+span span {
    color: @state-danger-text!important;
    &:after {
      color: @state-danger-text!important;
    }
  }
  .has-error & {
    .form-control+span {
      color: @state-danger-text!important;
      &:after {
        color: @state-danger-text!important;
      }
    }
  }
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.
// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  .box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 1px 0 0;
  margin-top: 1px \9; // IE8-9
  font-size: 16px;
  line-height: normal;
}

.plain input[type="checkbox"] {
  margin: 3px 0 0;
}

input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
  &:focus {
    outline: none;
  }
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Adjust output element
output {
  display: block;
  padding-top: (@padding-base-vertical + 1);
  color: @input-color;
  font-size: @font-size-base;
  line-height: @line-height-base;
}

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
.form-control {
  display: block;
  padding: @padding-base-vertical @padding-base-horizontal;
  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  border: @input-border-width solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  color: @input-color;
  font-size: @font-size-base;
  line-height: @line-height-base; // .box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075));

  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s"); // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();
  .placeholder(); // Placeholder
  //
  // Disabled and read-only inputs
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    box-shadow: none;
    //color: @text-muted;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }
  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  } // Reset height for `textarea`s
  textarea & {
    height: auto;
  }
}

textarea.form-control {
  resize: vertical;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.
input[type="search"] {
  -webkit-appearance: none;
  appearance: none;
}

// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 8.3, iOS doesn't support `datetime` or `week`.
@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    &.form-control {
      line-height: @input-height-base;
    }
    &.input-sm,
    .input-group-sm & {
      line-height: @input-height-small;
    }
    &.input-lg,
    .input-group-lg & {
      line-height: @input-height-large;
    }
  }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
  margin-bottom: @form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;
  label {
    position: static;
    margin-bottom: 0;
    padding-left: @margin-md;
    min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
    color: inherit;
    text-transform: none;
    font-weight: normal;
    font-size: inherit;
    cursor: pointer;
  }
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-top: 2px;
  margin-top: 4px \9;
  margin-left: -20px;
  font-size: 16px;
}

.radio+.radio,
.checkbox+.checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  margin-bottom: 0;
  padding-left: @margin-md;
  vertical-align: middle;
  text-transform: none;
  font-weight: normal;
  font-size: inherit;
  cursor: pointer;
}

.radio-inline+.radio-inline,
.checkbox-inline+.checkbox-inline {
  margin-top: 0;
  margin-left: @margin-base; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}

// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}

// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      color: lighten(@gray-medium-dark, 30%);
      cursor: @cursor-disabled;
    }
  }
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.
.form-control-static {
  margin-bottom: 0; // Size it appropriately next to real form controls
  padding-top: (@padding-base-vertical + 1);
  padding-bottom: (@padding-base-vertical + 1); // Remove default margin from `p`
  min-height: (@line-height-computed + @font-size-base);
  &.input-lg,
  &.input-sm {
    padding-right: 0;
    padding-left: 0;
  }
}

//Input group editable
// supports a save button and a cancel button
// inside a input-group
.input-group-editable {
  .input-group-btn {
    .btn-clean {
      position: relative;
      padding: 6px;
      &::after {
        position: absolute;
        top: 50%;
        right: 0;
        display: block;
        margin-top: -10px;
        width: 1px;
        height: 20px;
        background-color: fade(black, 10%);
        content: '';
      }
    }
    &:last-child {
      .btn-clean::after {
        display: none;
      }
    }
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.
.input-sm {
  .input-size(@input-height-small;
  @padding-small-vertical;
  @padding-small-horizontal;
  @font-size-small;
  @line-height-small;
  @input-border-radius-small);
}

.form-group-sm {
  margin-bottom: 12px;
  font-size: 12px;
  .form-control {
    padding: @padding-small-vertical @padding-small-horizontal;
    height: @input-height-small;
    border-radius: @input-border-radius-small;
    font-size: @font-size-small;
    line-height: @line-height-small;
  }
  select.form-control {
    height: @input-height-small;
    line-height: 1.2;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    padding: (@padding-small-vertical + 1) @padding-small-horizontal;
    min-height: (@line-height-computed + @font-size-small);
    height: @input-height-small;
    font-size: @font-size-small;
    line-height: @line-height-small;
  }
}

.input-lg {
  .input-size(@input-height-large;
  @padding-large-vertical;
  @padding-large-horizontal;
  @font-size-large;
  @line-height-large;
  @input-border-radius-large);
}

.form-group-lg {
  .form-control {
    padding: @padding-large-vertical @padding-large-horizontal;
    height: @input-height-large;
    border-radius: @input-border-radius-large;
    font-size: @font-size-large;
    line-height: @line-height-large;
  }
  select.form-control {
    height: @input-height-large;
    line-height: @input-height-large;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    padding: (@padding-large-vertical + 1) @padding-large-horizontal;
    min-height: (@line-height-computed + @font-size-large);
    height: @input-height-large;
    font-size: @font-size-large;
    line-height: @line-height-large;
  }
}

select.form-control {
  option:disabled,
  select[disabled]>option {
    color: darken(@gray-light, 10%);
  }
}

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.
.has-success {
  .form-control-validation(@state-success-text;
  @state-success-text;
  @state-success-bg);
  .form-control-feedback-message {
    background-color: @state-success-text;
    color: white;
  }
}

.has-warning {
  .form-control-validation(@state-warning-text;
  @state-warning-text;
  @state-warning-bg);
  .form-control-feedback-message {
    background-color: @state-warning-text;
    color: white;
  }
}

.has-error {
  .form-control-validation(@state-danger-text;
  @state-danger-text;
  @state-danger-bg);
  .form-control-feedback-message {
    background-color: @state-danger-text;
    color: white;
  }
}

// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: @input-height-base !important;
  text-align: center;
  line-height: @input-height-base!important;
  pointer-events: auto;
}

// feedback message
.form-control-feedback-message {
  position: absolute;
  right: 0;
  z-index: 2;
  padding: 0 2px;
  text-align: left;
  &:not(.ng-inactive) {
    box-shadow: 0 0 0 1px fade(black, 10%);
  }
}

// sizing
.input-lg+c8y-error-feedback .form-control-feedback,
.input-group-lg+c8y-error-feedback .form-control-feedback,
.form-group-lg .form-control+c8y-error-feedback .form-control-feedback,
.input-lg+.form-control-feedback,
.input-group-lg+.form-control-feedback,
.form-group-lg .form-control+.form-control-feedback {
  width: @input-height-large;
  line-height: @input-height-large!important;
}

.input-sm+c8y-error-feedback .form-control-feedback,
.input-group-sm+c8y-error-feedback .form-control-feedback,
.form-group-sm .form-control+c8y-error-feedback.form-control-feedback,
.input-sm+.form-control-feedback,
.input-group-sm+.form-control-feedback,
.form-group-sm .form-control+.form-control-feedback {
  width: @input-height-small;
  line-height: @input-height-small!important;
}

// Reposition feedback elements
.has-feedback {
  position: relative; // Ensure icons don't overlap text
  .form-control {
    padding-right: @margin-xl;
  }
  label~.form-control-feedback,
  & label~c8y-error-feedback .form-control-feedback {
    top: @line-height-computed - 2; // Height of the `label` and its margin
  }
  label~.form-control-feedback-message,
  & label~c8y-error-feedback .form-control-feedback-message {
    top: (@input-height-base + @line-height-computed - 2); // Height of input plus the `label` and its margin
  }
  
  .sr-only~.form-control-feedback,
  .sr-only~c8y-error-feedback .form-control-feedback {
    top: 0;
  }
  .sr-only~.form-control-feedback-message,
  .sr-only~c8y-error-feedback .form-control-feedback-message {
    top: @input-height-base;
  }
  label.visible-sm {
    &~.form-control-feedback,
    &~c8y-error-feedback .form-control-feedback {
      top: 0;
    }
    &~.form-control-feedback-message,
    &~c8y-error-feedback .form-control-feedback-message {
      top: @input-height-base;
    }
    @media(min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
      &~.form-control-feedback,
      &~c8y-error-feedback .form-control-feedback {
        top: (@line-height-computed)!important; // Height of the `label` and its margin
      }
      &~.form-control-feedback-message,
      &~c8y-error-feedback .form-control-feedback-message {
        top: ( @input-height-base + @line-height-computed)!important; // Height of the `label` and its margin
      }
      &.sr-only~.form-control-feedback,
      &.sr-only~c8y-error-feedback .form-control-feedback {
        top: 0;
      }
      &.sr-only~.form-control-feedback-message,
      &.sr-only~c8y-error-feedback .form-control-feedback-message {
        top: @input-height-base;
      }
    }
  }
  label.visible-xs {
    &~.form-control-feedback,
    &~c8y-error-feedback .form-control-feedback {
      top: 0;
    }
    &~.form-control-feedback-message,
    &~c8y-error-feedback .form-control-feedback-message {
      top: @input-height-base;
    }
    @media(max-width: @screen-xs-max) {
      &~.form-control-feedback,
      &~c8y-error-feedback .form-control-feedback {
        top: (@line-height-computed); // Height of the `label` and its margin
      }
      &~.form-control-feedback-message,
      &~c8y-error-feedback .form-control-feedback-message {
        top: (@input-height-base + @line-height-computed); // Height of the `label` and its margin
      }
      &.sr-only~.form-control-feedback,
      &.sr-only~c8y-error-feedback .form-control-feedback {
        top: 0;
      }
      &.sr-only~.form-control-feedback-message,
      &.sr-only~c8y-error-feedback .form-control-feedback-message {
        top: @input-height-base;
      }
    }
  }
  &.form-group-sm {
    .form-control-feedback {
      line-height: @input-height-small!important;
    }
    label~.form-control-feedback-message,
    & label~c8y-error-feedback .form-control-feedback-message {
      top: (@input-height-small + @line-height-computed); // Height of input plus the `label` and its margin
    }
    .sr-only~.form-control-feedback-message,
    .sr-only~c8y-error-feedback .form-control-feedback-message {
      top: @input-height-small;
    }
    label.visible-sm {
      &~.form-control-feedback-message,
      &~c8y-error-feedback .form-control-feedback-message {
        top: @input-height-small;
      }
      @media(min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
        &~.form-control-feedback,
        &~c8y-error-feedback .form-control-feedback {
          top: (@line-height-computed)!important; // Height of the `label` and its margin
        }
        &~.form-control-feedback-message,
        &~c8y-error-feedback .form-control-feedback-message {
          top: (@input-height-small + @line-height-computed)!important; // Height of the `label` and its margin
        }
        &.sr-only~.form-control-feedback,
        &.sr-only~c8y-error-feedback .form-control-feedback {
          top: 0;
        }
        &.sr-only~.form-control-feedback-message,
        &.sr-only~c8y-error-feedback .form-control-feedback-message {
          top: @input-height-small;
        }
      }
    }
    label.visible-xs {
      &~.form-control-feedback-message,
      &~c8y-error-feedback .form-control-feedback-message {
        top: @input-height-small;
      }
      @media(max-width: @screen-xs-max) {
        &~.form-control-feedback,
        &~c8y-error-feedback .form-control-feedback {
          top: (@line-height-computed); // Height of the `label` and its margin
        }
        &~.form-control-feedback-message,
        &~c8y-error-feedback .form-control-feedback-message {
          top: (@input-height-small + @line-height-computed); // Height of the `label` and its margin
        }
        &.sr-only~.form-control-feedback,
        &.sr-only~c8y-error-feedback .form-control-feedback {
          top: 0;
        }
        &.sr-only~.form-control-feedback-message,
        &.sr-only~c8y-error-feedback .form-control-feedback-message {
          top: @input-height-small;
        }
      }
    }
  }
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.
.help-block {
  display: block; // account for any element using help-block
  margin-top: 0;
  color: lighten(@text-color, 25%); // lighten the text some for contrast
  font-style: italic;
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.
.form-inline {
  // Kick in the inline
  @media (min-width: @screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    } // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    } // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }
    .input-group {
      display: inline-table;
      vertical-align: middle;
      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    } // Input groups need that 100% width though
    .input-group>.form-control {
      width: 100%;
    }
    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    } // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;
      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    } // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
    .has-feedback .form-control-feedback-message {
      top: @input-height-base;
    }
  }
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
.form-horizontal {
  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (@padding-base-vertical + 1); // Default padding plus a border
  } // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: (@line-height-computed + (@padding-base-vertical + 1));
  } // Make form groups behave like rows
  .form-group {
    .make-row();
    .form-group {
      position: relative;
      margin-right: 0;
      margin-left: 0;
      .form-control-feedback {
        right: 5px;
      }
    }
  } // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: @screen-sm-min) {
    .control-label {
      margin-bottom: 0;
      padding-top: (@padding-base-vertical + 4); // Default padding plus a border
      text-align: right;
    }
  } // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: (floor((@grid-gutter-width / 2)) + 5);
  } // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: @screen-sm-min) {
      .control-label {
        padding-top: ((@padding-large-vertical * @line-height-large) + 1);
        font-size: @font-size-large;
      }
    }
  }
  .form-group-sm {
    @media (min-width: @screen-sm-min) {
      .control-label {
        padding-top: (@padding-small-vertical + 1);
        font-size: @font-size-small;
      }
    }
  }
}

// disable editing in forms
.form-read-only {
  position: relative;
  &:after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1000;
    content: '';
  }
  .form-group {
    margin: 0;
  }
  .form-control,
  .form-control.input-sm,
  .form-control.input-lg {
    padding: 0;
    border-color: transparent;
    background-color: transparent;
    //line-height: 1;
    resize: none;

    .box-shadow(none);
    &.ng-empty {
      display: none;
    }
  }
  textarea.form-control{
    line-height: 1.42857143;
    height: auto;
  }
  .btn:not(.form-edit-btn) {
    display: none;
  }
  .form-edit-btn {
    position: relative;
    z-index: 1001;
  }
  input[type="number"] {
    -moz-appearance: textfield;
    -webkit-appearance: none;
    appearance: none;
  }
}

// add transition on editable forms
.form-editable {
  .form-control {
    .transition(all .25s ease);
  }
  &.form-read-only {
    input,
    textarea {
      color: inherit;
    }
  }
}

.btn-save-wrapper {
  animation-duration: .5s;
  &.changed-remove-active {
    animation-duration: 0;
  }
}

.btn-save-wrapper.changed {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: (@zindex-navbar-fixed - 1);
  padding: 10px 45px; //defaults to device management vertical tabs spacing
  background-color: white;
  transition: left .4s ease-in-out; //horizontal tabs

  .boxShadowHelper(3, top); //box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
  .mcontainerHorizontal & {
    left: 0;
    padding: 10px 15px;
  }
  .open & {
    left: @navigatorWidth;
  }
}

.open {
  .has-tabs.page-tabs-vertical+.container-fluid {
    .btn-save-wrapper.changed {
      left: @navigatorWidth + @nav-tabs-vertical-width;
    }
  }
}